#!/usr/bin/env python

import argparse, os, sys
from collections import defaultdict, namedtuple

ROOT = os.path.dirname(os.path.realpath(__file__))

sys.path.insert(0, ROOT)

from dap.ftputil import FTP
from dap.util import sizeof


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('-o', '--out', default=None,
        help='Output file')
    p.add_argument('-p', '--pct', default=1.0, type=float,
        help='Only show subdirs that contribute at least this percent to the total')
    p.add_argument('host',
        help='FTP host')
    p.add_argument('path', default=['/'], nargs='*',
        help='Path to recursively calculate')
    return p.parse_args()


def write(host, path, entries, total, min_pct=1.0):
    out = open(path, 'w')
    out.write('HOST: %s\n\n' % host)
    for entry in reversed(entries):
        pct = (entry.size/float(total)) * 100.0
        if pct >= min_pct:
            line = '{:>10} {}\n'.format(sizeof(entry.size), entry.name)
            out.write(line)
    out.close()


def main():
    args = parse_args()
    host = args.host
    ftp = FTP(host)
    
    for root in args.path:
        entries = []
        total = 0
        for entry in ftp.dirsize(root):
            entries.append(entry)
            total += entry.size

        path = args.out
        if path is None:
            path = '%s__%s.txt' % (host.replace('.', '_'), root.replace('/', '_'))

        write(host, path, entries, total, args.pct)


if __name__ == '__main__':
    main()

